{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","columns","isFirstMove","isMoved","changed","left","right","up","down","startMessage","document","querySelector","winMessage","loseMessage","startButton","window","onload","setGame","addEventListener","e","code","slideLeft","slideRight","slideUp","slideDown","Object","values","filter","value","length","isFreeSpace","classList","remove","setTimeout","addNumber","resetBoard","startGame","forEach","matrixRow","rowIndex","htmlRow","createElement","append","_","columnIndex","htmlCell","num","id","updateTile","add","replace","innerHTML","row","cell","tile","getElementById","Math","floor","random","number","calculateProbabilityNumber","innerText","slide","direction","updatedRow","filterZero","cellIndex","push","isSame","every","isRowEmpty","r","c","reverse","fill","index","some"],"mappings":"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","file":"main.e70b26e8.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// region variables\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nlet isFirstMove = true;\nlet isMoved = false;\nlet changed = {\n  left: true,\n  right: true,\n  up: true,\n  down: true,\n};\n\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startButton = document.querySelector('.start');\n// endregion\n\nwindow.onload = function() {\n  setGame();\n};\n\ndocument.addEventListener('keyup', (e) => {\n  isMoved = false;\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      break;\n    case 'ArrowUp':\n      slideUp();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      break;\n    default:\n      break;\n  }\n\n  const isAnythingChanged = !!Object.values(changed)\n    .filter(value => value).length;\n\n  if (!isAnythingChanged && !isFreeSpace()) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (isMoved) {\n    setTimeout(() => addNumber(), 300);\n  }\n});\n\nstartButton.addEventListener('click', e => {\n  resetBoard();\n  startGame();\n});\n\n// region main functions\nconst setGame = () => {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  board.forEach((matrixRow, rowIndex) => {\n    const htmlRow = document.createElement('tr');\n\n    document.querySelector('.game-field').append(htmlRow);\n\n    matrixRow.forEach((_, columnIndex) => {\n      const htmlCell = document.createElement('td');\n      const num = board[rowIndex][columnIndex];\n\n      htmlCell.id = `${rowIndex}-${columnIndex}`;\n      updateTile(htmlCell, num);\n      htmlRow.append(htmlCell);\n    });\n  });\n};\n\nconst startGame = () => {\n  addNumber();\n  addNumber();\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startButton.classList.replace('start', 'restart');\n  startButton.innerHTML = 'Restart';\n};\n\nconst resetBoard = () => {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      const tile = document.getElementById(`${rowIndex}-${columnIndex}`);\n\n      updateTile(tile, 0);\n    });\n  });\n};\n\nconst addNumber = () => {\n  if (!isFreeSpace()) {\n    return;\n  }\n\n  const rowIndex = Math.floor(Math.random() * rows);\n  const columnIndex = Math.floor(Math.random() * columns);\n  const cell = document.getElementById(`${rowIndex}-${columnIndex}`);\n  const number = calculateProbabilityNumber();\n\n  if (cell.innerText) {\n    addNumber();\n\n    return;\n  }\n\n  board[rowIndex][columnIndex] = number;\n  updateTile(cell, number);\n};\n\nconst updateTile = (cell, num) => {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = num;\n\n    if (num < 2048) {\n      cell.classList.add(`field-cell--${num}`);\n    } else {\n      cell.classList.add(`field-cell--2048`);\n    }\n  }\n};\n// endregion\n\n// region slide functions\nconst slide = (row, direction) => {\n  if (isFirstMove) {\n    isFirstMove = false;\n    startGame();\n  }\n  changed[direction] = false;\n\n  let updatedRow = filterZero(row);\n\n  updatedRow.forEach((cell, cellIndex) => {\n    if (updatedRow[cellIndex] === updatedRow[cellIndex + 1]) {\n      changed = {\n        left: true,\n        right: true,\n        up: true,\n        down: true,\n      };\n      updatedRow[cellIndex] *= 2;\n      updatedRow[cellIndex + 1] = 0;\n      score += updatedRow[cellIndex];\n      document.querySelector('.game-score').innerHTML = score;\n\n      if (updatedRow[cellIndex] === 2048) {\n        winMessage.classList.remove('hidden');\n      }\n    }\n  });\n\n  updatedRow = filterZero(updatedRow);\n\n  while (updatedRow.length < columns) {\n    updatedRow.push(0);\n  }\n\n  const isSame = updatedRow.every(\n    (cell, cellIndex) => cell === row[cellIndex]);\n  const isRowEmpty = !filterZero(row).length;\n\n  if (!isSame && !isRowEmpty) {\n    isMoved = true;\n  }\n\n  return updatedRow;\n};\n\nconst slideLeft = () => {\n  for (let r = 0; r < rows; r++) {\n    board[r] = slide(board[r], 'left');\n\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      if (+cell.innerText !== num) {\n        updateTile(cell, num);\n      }\n    }\n  }\n};\n\nconst slideRight = () => {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row, 'right');\n    row.reverse();\n\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      if (+cell.innerText !== num) {\n        updateTile(cell, num);\n      }\n    }\n  }\n};\n\nconst slideUp = () => {\n  for (let c = 0; c < columns; c++) {\n    let row = [];\n\n    row.length = rows;\n    row.fill(0);\n\n    row.forEach((_, index) => {\n      row[index] = board[index][c];\n    });\n\n    row = slide(row, 'up');\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const cell = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      if (+cell.innerText !== num) {\n        updateTile(cell, num);\n      }\n    }\n  }\n};\n\nconst slideDown = () => {\n  for (let c = 0; c < columns; c++) {\n    let row = [];\n\n    row.length = rows;\n    row.fill(0);\n\n    row.forEach((_, index) => {\n      row[index] = board[index][c];\n    });\n\n    row.reverse();\n    row = slide(row, 'down');\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const cell = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      if (+cell.innerText !== num) {\n        updateTile(cell, num);\n      }\n    }\n  }\n};\n// endregion\n\n// region utility functions\nconst isFreeSpace = () => {\n  return board.some((row) => row.some(cell => cell === 0));\n};\n\nconst calculateProbabilityNumber = () => {\n  return Math.random() > 0.9 ? 4 : 2;\n};\n\nconst filterZero = (row) => {\n  return row.filter(num => num !== 0);\n};\n// endregion\n"]}